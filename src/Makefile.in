C_OBJS := add3pt.o calcLD.o founderprob.o qsort.o rngs.o sim.o impute.o
CPP_OBJS := rfhaps.o rfhaps_cpu.o getFunnel.o validateMPCross.o findIDInPedigree.o intercrossingGenerations.o getAllFunnels.o orderFunnels.o allowableMarkerPatterns.o generateDesignMatrix.o generateGenotypes.o
CUDA_OBJS := @CUDA_OBJS@
PKG_CPPFLAGS := @PKG_CPPFLAGS@ -I../inst/include -I. -std=gnu++0x 
CUDA_CPPFLAGS := @CUDA_CPPFLAGS@

#compiler/preprocessor options
PARAMS := @DEVICEOPTS@ -Xcompiler @CPICFLAGS@

#linker options
LD_PARAMS := @DEVICEOPTS@ -Xlinker @RPATHFLAG@
LIBS :=  @R_LIB@ @LIBS@

TARGETS := mpMap.so

NVCC := @CUDA_HOME@/bin/nvcc -gencode arch=compute_13,code=sm_13 -gencode arch=compute_20,code=sm_20 -gencode arch=compute_30,code=sm_30

all: $(TARGETS) 

$(TARGETS): $(C_OBJS) $(CPP_OBJS) $(CUDA_OBJS)
	$(CC) -shared $(LD_PARAMS) $(LIBS) $(C_OBJS) $(CPP_OBJS) $(CUDA_OBJS) -o $@

$(CUDA_OBJS): %.o: %.cu
	$(NVCC) -c -I. -I../inst/include -I@CUDA_HOME@/include $(PARAMS) $(CUDA_CPPFLAGS) $^ -o $@
clean: 
	rm -rf *o

.PHONY: all clean

USERDIR =       ../inst/lib
USERLIBST =     libmpMap.a

userLibrary:    $(USERLIBST)
	@if test ! -e $(USERDIR)$(R_ARCH); then mkdir -p $(USERDIR)$(R_ARCH); fi
	cp $(USERLIBST) $(USERDIR)$(R_ARCH)
	rm $(USERLIBST)

$(USERLIBST):   $(C_OBJS) $(CPP_OBJS) $(CUDA_OBJS)
	$(AR) qc $(USERLIBST) $(C_OBJS) $(CPP_OBJS) $(CUDA_OBJS)
	@if test -n "$(RANLIB)"; then $(RANLIB) $(USERLIBST); fi
